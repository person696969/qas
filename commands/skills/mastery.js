
const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const db = require('../../database.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('mastery')
        .setDescription('üéØ Master your skills and unlock powerful abilities')
        .addSubcommand(subcommand =>
            subcommand
                .setName('train')
                .setDescription('Train a specific skill')
                .addStringOption(option =>
                    option.setName('skill')
                        .setDescription('Which skill to train')
                        .setRequired(true)
                        .addChoices(
                            { name: '‚öîÔ∏è Combat - Physical prowess and battle tactics', value: 'combat' },
                            { name: 'üî® Crafting - Create and enhance items', value: 'crafting' },
                            { name: '‚õèÔ∏è Mining - Extract valuable resources', value: 'mining' },
                            { name: 'üé£ Fishing - Master the art of angling', value: 'fishing' },
                            { name: 'üåø Foraging - Find rare herbs and materials', value: 'foraging' },
                            { name: '‚ú® Magic - Harness mystical energies', value: 'magic' },
                            { name: 'üèÉ Agility - Speed and dexterity training', value: 'agility' },
                            { name: 'üß† Intelligence - Mental acuity and wisdom', value: 'intelligence' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('progress')
                .setDescription('View your skill levels and detailed progress'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('perks')
                .setDescription('View and unlock skill perks and abilities'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('specialization')
                .setDescription('Choose specializations for enhanced abilities'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('mastery-challenge')
                .setDescription('Take on mastery challenges for bonus XP')),

    async execute(interaction) {
        await interaction.deferReply();

        try {
            const subcommand = interaction.options.getSubcommand();
            const userId = interaction.user.id;

            const player = await db.getPlayer(userId);
            if (!player) {
                await interaction.editReply({
                    content: '‚ùå You need to create a profile first! Use `/profile` to get started.',
                    ephemeral: true
                });
                return;
            }

            // Initialize enhanced skills data
            if (!player.skills) {
                player.skills = this.getDefaultSkills();
            }

            switch (subcommand) {
                case 'train':
                    await this.handleTraining(interaction, player);
                    break;
                case 'progress':
                    await this.showProgress(interaction, player);
                    break;
                case 'perks':
                    await this.showPerks(interaction, player);
                    break;
                case 'specialization':
                    await this.showSpecializations(interaction, player);
                    break;
                case 'mastery-challenge':
                    await this.showMasteryChallenges(interaction, player);
                    break;
            }

        } catch (error) {
            console.error('Error in mastery command:', error);
            await interaction.editReply({
                content: '‚ùå An error occurred while managing skills. Please try again.',
                ephemeral: true
            });
        }
    },

    async handleTraining(interaction, player) {
        const skill = interaction.options.getString('skill');
        const currentTime = Date.now();
        const trainingCooldown = 180000; // 3 minutes

        if (currentTime - (player.skills.lastTraining || 0) < trainingCooldown) {
            const remainingTime = Math.ceil((trainingCooldown - (currentTime - (player.skills.lastTraining || 0))) / 60000);
            await interaction.editReply({
                content: `‚è≥ You need to rest for ${remainingTime} more minutes before training again.\nüí° *Use this time to explore other features!*`,
                ephemeral: true
            });
            return;
        }

        const selectedSkill = player.skills[skill] || this.getDefaultSkill();
        const staminaCost = 25 + Math.floor(selectedSkill.level / 5) * 5;
        const goldCost = Math.floor(50 * Math.pow(1.3, selectedSkill.level - 1));

        if ((player.stamina || 100) < staminaCost) {
            await interaction.editReply({
                content: `‚ùå You need ${staminaCost} stamina to train ${skill}!\nüí° *Rest or use stamina potions to recover.*`,
                ephemeral: true
            });
            return;
        }

        if ((player.coins || 0) < goldCost) {
            await interaction.editReply({
                content: `‚ùå You need ${goldCost} coins to train ${skill}!\nüí° *Complete hunts or work to earn more coins.*`,
                ephemeral: true
            });
            return;
        }

        const trainingMethods = this.getTrainingMethods(skill, selectedSkill.level);
        
        const embed = new EmbedBuilder()
            .setColor('#4169E1')
            .setTitle(`üéØ ${this.getSkillEmoji(skill)} ${this.capitalize(skill)} Training`)
            .setDescription(`**Choose your training method**\n\nCurrent Level: **${selectedSkill.level}** (${selectedSkill.exp}/${selectedSkill.nextLevel} XP)`)
            .addFields([
                { 
                    name: 'üí∞ Training Cost', 
                    value: `**Gold:** ${goldCost}\n**Stamina:** ${staminaCost}`, 
                    inline: true 
                },
                { 
                    name: 'üìà Potential Gains', 
                    value: `**Base XP:** ${trainingMethods.normal.baseExp}\n**Bonus XP:** Up to ${trainingMethods.intense.baseExp}`, 
                    inline: true 
                },
                {
                    name: 'üèÜ Next Milestone',
                    value: `**Level ${selectedSkill.level + 1}:** ${this.getNextPerk(skill, selectedSkill.level + 1)}\n**Progress:** ${Math.floor((selectedSkill.exp / selectedSkill.nextLevel) * 100)}%`,
                    inline: false
                }
            ])
            .setFooter({ text: 'üí° Higher intensity training has better rewards but higher failure risk!' });

        const methods = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('train_normal')
                    .setLabel('üéØ Normal Training')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('üìö'),
                new ButtonBuilder()
                    .setCustomId('train_intense')
                    .setLabel('üí™ Intense Training')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üî•'),
                new ButtonBuilder()
                    .setCustomId('train_meditation')
                    .setLabel('üßò Focused Meditation')
                    .setStyle(ButtonStyle.Success)
                    .setEmoji('‚ú®')
            );

        const controls = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('train_cancel')
                    .setLabel('Cancel')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('train_auto')
                    .setLabel('ü§ñ Auto Train')
                    .setStyle(ButtonStyle.Secondary)
                    .setDisabled(selectedSkill.level < 5)
            );

        const response = await interaction.editReply({
            embeds: [embed],
            components: [methods, controls]
        });

        const filter = i => i.user.id === interaction.user.id && i.customId.startsWith('train_');
        
        try {
            const confirmation = await response.awaitMessageComponent({ filter, time: 45000 });

            if (confirmation.customId === 'train_cancel') {
                await confirmation.update({
                    content: '‚ùå Training session cancelled.',
                    embeds: [],
                    components: []
                });
                return;
            }

            // Process training
            const methodKey = confirmation.customId.replace('train_', '');
            const result = await this.processTraining(player, skill, methodKey, goldCost, staminaCost);

            await confirmation.update({
                embeds: [result.embed],
                components: result.components || []
            });

            // Save progress
            await db.updatePlayer(interaction.user.id, player);

        } catch (e) {
            await interaction.editReply({
                content: '‚ùå Training session timed out. Please try again.',
                embeds: [],
                components: []
            });
        }
    },

    async processTraining(player, skill, method, goldCost, staminaCost) {
        const selectedSkill = player.skills[skill];
        const trainingMethods = this.getTrainingMethods(skill, selectedSkill.level);
        const methodData = trainingMethods[method] || trainingMethods.normal;

        // Deduct costs
        player.coins = (player.coins || 0) - goldCost;
        player.stamina = (player.stamina || 100) - staminaCost;
        player.skills.lastTraining = Date.now();

        // Calculate results
        const successRate = Math.random();
        let expGained, trainingResult, bonusReward = '';

        if (method === 'auto') {
            expGained = Math.floor(methodData.baseExp * 0.8); // 80% efficiency for auto
            trainingResult = 'ü§ñ Auto-training completed efficiently.';
        } else if (successRate > methodData.criticalChance) {
            expGained = Math.floor(methodData.baseExp * methodData.criticalMultiplier);
            trainingResult = `${methodData.criticalText} (${methodData.criticalMultiplier}x exp)`;
            
            // Bonus rewards for critical success
            if (Math.random() > 0.8) {
                const bonusCoins = Math.floor(goldCost * 0.5);
                player.coins += bonusCoins;
                bonusReward = `\nüí∞ Bonus reward: ${bonusCoins} coins!`;
            }
        } else if (successRate > methodData.failChance) {
            expGained = methodData.baseExp;
            trainingResult = methodData.successText;
        } else {
            expGained = Math.floor(methodData.baseExp * 0.3);
            trainingResult = methodData.failText;
        }

        selectedSkill.exp += expGained;

        // Level up check
        let levelUpRewards = '';
        while (selectedSkill.exp >= selectedSkill.nextLevel) {
            selectedSkill.exp -= selectedSkill.nextLevel;
            selectedSkill.level += 1;
            selectedSkill.nextLevel = Math.floor(100 * Math.pow(1.5, selectedSkill.level - 1));
            
            const newPerk = this.getNextPerk(skill, selectedSkill.level);
            levelUpRewards += `\nüåü **Level ${selectedSkill.level} reached!** Unlocked: ${newPerk}`;
            
            // Award level up bonuses
            const levelBonus = selectedSkill.level * 10;
            player.coins += levelBonus;
            levelUpRewards += `\nüí∞ Level bonus: ${levelBonus} coins`;
        }

        const embed = new EmbedBuilder()
            .setColor(expGained >= methodData.baseExp ? '#00FF00' : '#FFA500')
            .setTitle(`üéØ ${this.getSkillEmoji(skill)} Training Results`)
            .setDescription(`${trainingResult}${bonusReward}${levelUpRewards}`)
            .addFields([
                { name: 'Skill', value: this.capitalize(skill), inline: true },
                { name: 'Level', value: selectedSkill.level.toString(), inline: true },
                { name: 'Exp Gained', value: expGained.toString(), inline: true },
                { 
                    name: 'Progress', 
                    value: `${selectedSkill.exp}/${selectedSkill.nextLevel}\n${this.createProgressBar(selectedSkill.exp, selectedSkill.nextLevel)}`, 
                    inline: false 
                }
            ])
            .setFooter({ text: `Training efficiency: ${Math.floor((expGained / methodData.baseExp) * 100)}%` });

        const components = levelUpRewards ? [
            new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('view_perks')
                    .setLabel('üåü View New Perks')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('continue_training')
                    .setLabel('üîÑ Continue Training')
                    .setStyle(ButtonStyle.Primary)
            )
        ] : undefined;

        return { embed, components };
    },

    async showProgress(interaction, player) {
        const embed = new EmbedBuilder()
            .setColor('#4169E1')
            .setTitle('üìä Skill Mastery Progress')
            .setDescription('**Your journey to mastery**\nTrack your progress across all skills and specializations.')
            .setThumbnail(interaction.user.displayAvatarURL());

        let totalLevel = 0;
        let totalExp = 0;

        Object.entries(player.skills).forEach(([skill, data]) => {
            if (skill !== 'lastTraining' && skill !== 'specializations') {
                const progressBar = this.createProgressBar(data.exp, data.nextLevel);
                const masteryLevel = this.getMasteryLevel(data.level);
                const nextPerk = this.getNextPerk(skill, data.level + 1);
                
                embed.addFields({
                    name: `${this.getSkillEmoji(skill)} ${this.capitalize(skill)} ${masteryLevel}`,
                    value: `**Level ${data.level}** (${data.exp}/${data.nextLevel} exp)\n${progressBar}\nüéØ Next: ${nextPerk}`,
                    inline: true
                });
                
                totalLevel += data.level;
                totalExp += data.exp + (data.level - 1) * 100;
            }
        });

        const avgLevel = Math.floor(totalLevel / Object.keys(player.skills).length - 1);
        const masteryRank = this.getMasteryRank(totalLevel);

        embed.addFields([
            {
                name: 'üìà Overall Progress',
                value: `**Total Skill Levels:** ${totalLevel}\n**Average Level:** ${avgLevel}\n**Total Experience:** ${totalExp.toLocaleString()}\n**Mastery Rank:** ${masteryRank}`,
                inline: false
            },
            {
                name: 'üèÜ Mastery Milestones',
                value: this.getMasteryMilestones(totalLevel),
                inline: false
            }
        ]);

        const buttons = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('skill_calculator')
                    .setLabel('üßÆ XP Calculator')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('skill_compare')
                    .setLabel('‚öñÔ∏è Compare Skills')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('training_plan')
                    .setLabel('üìã Training Plan')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.editReply({ embeds: [embed], components: [buttons] });
    },

    async showPerks(interaction, player) {
        const embed = new EmbedBuilder()
            .setColor('#9B59B6')
            .setTitle('‚ú® Skill Perks & Abilities')
            .setDescription('**Unlock powerful abilities as you master each skill**\nEach skill level grants unique perks and bonuses.');

        const skillSelect = new StringSelectMenuBuilder()
            .setCustomId('perk_skill_select')
            .setPlaceholder('üéØ Select a skill to view perks...')
            .addOptions([
                { label: '‚öîÔ∏è Combat Perks', value: 'combat', description: 'Battle prowess and combat abilities' },
                { label: 'üî® Crafting Perks', value: 'crafting', description: 'Creation and enhancement bonuses' },
                { label: '‚õèÔ∏è Mining Perks', value: 'mining', description: 'Resource extraction improvements' },
                { label: 'üé£ Fishing Perks', value: 'fishing', description: 'Angling mastery and rare catches' },
                { label: 'üåø Foraging Perks', value: 'foraging', description: 'Nature gathering and herbalism' },
                { label: '‚ú® Magic Perks', value: 'magic', description: 'Mystical powers and enchantments' },
                { label: 'üèÉ Agility Perks', value: 'agility', description: 'Speed and dexterity bonuses' },
                { label: 'üß† Intelligence Perks', value: 'intelligence', description: 'Mental prowess and wisdom' }
            ]);

        // Show overview of all unlocked perks
        let unlockedPerks = 0;
        let totalPerks = 0;

        Object.entries(player.skills).forEach(([skill, data]) => {
            if (skill !== 'lastTraining' && skill !== 'specializations') {
                const skillPerks = this.getSkillPerks(skill);
                totalPerks += Object.keys(skillPerks).length;
                
                Object.entries(skillPerks).forEach(([level, perk]) => {
                    if (data.level >= parseInt(level)) {
                        unlockedPerks++;
                    }
                });
            }
        });

        embed.addFields([
            {
                name: 'üéØ Perk Progress',
                value: `**Unlocked:** ${unlockedPerks}/${totalPerks}\n**Progress:** ${Math.floor((unlockedPerks / totalPerks) * 100)}%\n**Perk Points:** ${unlockedPerks * 2}`,
                inline: true
            },
            {
                name: 'üåü Latest Unlocks',
                value: this.getRecentPerks(player.skills),
                inline: true
            }
        ]);

        await interaction.editReply({
            embeds: [embed],
            components: [new ActionRowBuilder().addComponents(skillSelect)]
        });
    },

    getDefaultSkills() {
        return {
            combat: { level: 1, exp: 0, nextLevel: 100 },
            crafting: { level: 1, exp: 0, nextLevel: 100 },
            mining: { level: 1, exp: 0, nextLevel: 100 },
            fishing: { level: 1, exp: 0, nextLevel: 100 },
            foraging: { level: 1, exp: 0, nextLevel: 100 },
            magic: { level: 1, exp: 0, nextLevel: 100 },
            agility: { level: 1, exp: 0, nextLevel: 100 },
            intelligence: { level: 1, exp: 0, nextLevel: 100 },
            lastTraining: 0,
            specializations: {}
        };
    },

    getDefaultSkill() {
        return { level: 1, exp: 0, nextLevel: 100 };
    },

    getTrainingMethods(skill, level) {
        const baseExp = Math.floor(25 * Math.pow(1.1, level));
        
        return {
            normal: {
                baseExp,
                successText: 'Training session completed successfully.',
                criticalChance: 0.8,
                criticalMultiplier: 1.5,
                criticalText: 'Excellent training session!',
                failChance: 0.1,
                failText: 'Training was disrupted, but you learned something.'
            },
            intense: {
                baseExp: Math.floor(baseExp * 1.5),
                successText: 'Intense training pushed your limits!',
                criticalChance: 0.7,
                criticalMultiplier: 2.0,
                criticalText: 'Perfect execution! Outstanding results!',
                failChance: 0.3,
                failText: 'The intensity was too much, but you gained some experience.'
            },
            meditation: {
                baseExp: Math.floor(baseExp * 0.8),
                successText: 'Focused meditation enhanced your understanding.',
                criticalChance: 0.9,
                criticalMultiplier: 1.8,
                criticalText: 'Deep meditation unlocked hidden insights!',
                failChance: 0.05,
                failText: 'Meditation was peaceful but yielded modest gains.'
            },
            auto: {
                baseExp: Math.floor(baseExp * 0.8),
                successText: 'Auto-training completed efficiently.',
                criticalChance: 0.85,
                criticalMultiplier: 1.2,
                criticalText: 'Auto-training exceeded expectations!',
                failChance: 0.05,
                failText: 'Auto-training experienced minor issues.'
            }
        };
    },

    getSkillEmoji(skill) {
        const emojis = {
            combat: '‚öîÔ∏è',
            crafting: 'üî®',
            mining: '‚õèÔ∏è',
            fishing: 'üé£',
            foraging: 'üåø',
            magic: '‚ú®',
            agility: 'üèÉ',
            intelligence: 'üß†'
        };
        return emojis[skill] || 'üéØ';
    },

    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    },

    createProgressBar(current, max, length = 20) {
        const progress = Math.floor((current / max) * length);
        const bar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(length - progress);
        const percentage = Math.floor((current / max) * 100);
        return `${bar} ${percentage}%`;
    },

    getNextPerk(skill, level) {
        const perks = this.getSkillPerks(skill);
        const nextPerkLevel = Object.keys(perks).find(l => parseInt(l) >= level);
        return nextPerkLevel ? perks[nextPerkLevel] : 'Max level reached!';
    },

    getSkillPerks(skill) {
        const perkTrees = {
            combat: {
                5: 'üó°Ô∏è +10% weapon damage',
                10: 'üõ°Ô∏è +5% damage reduction',
                15: '‚öîÔ∏è Unlock combo attacks',
                20: 'üí™ +15% critical hit chance',
                25: 'üèÜ Weapon mastery bonuses',
                30: '‚ö° Lightning strike ability',
                40: 'üî• Berserker rage mode',
                50: 'üëë Combat grandmaster'
            },
            crafting: {
                5: '‚öíÔ∏è +10% crafting success rate',
                10: 'üì¶ Craft multiple items at once',
                15: 'üî® -20% material costs',
                20: '‚ú® Chance to craft rare items',
                25: 'üéØ Perfect quality crafting',
                30: 'üåü Legendary item crafting',
                40: 'üîÆ Enchanted item creation',
                50: 'üëë Master artificer'
            },
            mining: {
                5: '‚õèÔ∏è +15% mining yield',
                10: 'üíé +25% rare gem chance',
                15: 'üîç Detect valuable ores',
                20: '‚ö° +30% mining speed',
                25: 'üí∞ Double ore rewards',
                30: 'üåã Access to deep mines',
                40: 'üíé Legendary gem discovery',
                50: 'üëë Mining tycoon'
            },
            fishing: {
                5: 'üé£ +15% fishing success rate',
                10: 'üê† Better fish quality',
                15: 'üåä Find treasures while fishing',
                20: 'üéÆ Master fishing techniques',
                25: 'üêâ Legendary fish encounters',
                30: 'üè¥‚Äç‚ò†Ô∏è Deep sea fishing',
                40: 'ü¶à Mythical creature fishing',
                50: 'üëë Fishing legend'
            },
            foraging: {
                5: 'üåø +20% gathering yield',
                10: 'üçÑ Find rare herbs',
                15: 'üå≥ Multiple item gathering',
                20: 'üîç Track valuable resources',
                25: 'üå∏ Seasonal gathering bonuses',
                30: 'ü¶ã Attract rare creatures',
                40: 'üå∫ Mystical plant discovery',
                50: 'üëë Nature's guardian'
            },
            magic: {
                5: '‚ú® +15% spell power',
                10: 'üìö Learn advanced spells',
                15: 'üîÆ -25% mana costs',
                20: 'üåü Dual casting ability',
                25: '‚ö° Elemental mastery',
                30: 'üé≠ Illusion magic',
                40: 'üåå Reality manipulation',
                50: 'üëë Archmage powers'
            },
            agility: {
                5: 'üèÉ +20% movement speed',
                10: 'üéØ +15% dodge chance',
                15: '‚ö° Lightning reflexes',
                20: 'üé™ Acrobatic abilities',
                25: 'üë§ Shadow step technique',
                30: 'üå™Ô∏è Whirlwind movement',
                40: '‚è∞ Time dilation',
                50: 'üëë Speed demon'
            },
            intelligence: {
                5: 'üß† +10% XP gain',
                10: 'üìñ Faster skill learning',
                15: 'üîç Enhanced perception',
                20: 'üí° Strategic thinking',
                25: 'üéì Wisdom bonuses',
                30: 'üîÆ Precognition abilities',
                40: 'üåü Enlightenment state',
                50: 'üëë Sage of wisdom'
            }
        };
        
        return perkTrees[skill] || {};
    },

    getMasteryLevel(level) {
        if (level >= 50) return 'üëë Grandmaster';
        if (level >= 40) return 'üåü Master';
        if (level >= 30) return 'üèÜ Expert';
        if (level >= 20) return '‚≠ê Advanced';
        if (level >= 10) return 'üéØ Skilled';
        if (level >= 5) return 'üìà Apprentice';
        return 'üå± Novice';
    },

    getMasteryRank(totalLevel) {
        if (totalLevel >= 400) return 'üëë Legendary Master';
        if (totalLevel >= 300) return 'üåü Grand Master';
        if (totalLevel >= 200) return 'üèÜ Master Craftsman';
        if (totalLevel >= 150) return '‚≠ê Expert Adventurer';
        if (totalLevel >= 100) return 'üéØ Skilled Practitioner';
        if (totalLevel >= 50) return 'üìà Dedicated Student';
        return 'üå± Promising Beginner';
    },

    getMasteryMilestones(totalLevel) {
        const milestones = [
            { level: 50, reward: 'üéÅ Starter milestone reward' },
            { level: 100, reward: 'üí∞ +1000 coins, skill point' },
            { level: 150, reward: 'üéí Expanded inventory' },
            { level: 200, reward: '‚ö° +50 max stamina' },
            { level: 300, reward: 'üèÜ Master\'s equipment set' },
            { level: 400, reward: 'üëë Legendary title and abilities' }
        ];

        return milestones.map(m => 
            `${totalLevel >= m.level ? '‚úÖ' : '‚ùå'} Level ${m.level}: ${m.reward}`
        ).join('\n');
    },

    getRecentPerks(skills) {
        const recentPerks = [];
        Object.entries(skills).forEach(([skill, data]) => {
            if (skill !== 'lastTraining' && skill !== 'specializations' && data.level >= 5) {
                const latestPerk = Math.floor(data.level / 5) * 5;
                if (latestPerk <= data.level) {
                    recentPerks.push(`${this.getSkillEmoji(skill)} ${this.capitalize(skill)} Lv.${latestPerk}`);
                }
            }
        });
        
        return recentPerks.slice(-3).join('\n') || 'No perks unlocked yet';
    }
};
